import { useState } from 'react';
import Terminal from 'react-console-emulator';
import VulnerabilityAssessmentContent from '../../data/modules/VulnerabilityAssessmentContent';
import Footer from '../Navbar-Footer/Footer';
import '../../styles/Modules/shared.css';
import '../../styles/Modules/VulnerabilityAssessment.css';

export default function VulnerabilityAssessment() {
  const [activeTerminal, setActiveTerminal] = useState(null);

  const terminalCommands = {
    ping: {
      description: 'Ping a domain to check connectivity',
      usage: 'ping <domain>',
      fn: (args) => `Pinging ${args}...\nReply from ${args}: bytes=32 time=15ms TTL=54`,
    },
    'arp-scan': {
      description: 'Scan local network for active hosts',
      usage: 'arp-scan -l',
      fn: () =>
        `Interface: eth0\nStarting ARP Scan...\n192.168.0.1\tRouter\n192.168.0.101\tYour PC\n192.168.0.110\tPrinter`,
    },
    nc: {
      description: 'Check for open ports using Netcat',
      usage: 'nc -z -v <ip> <port-range>',
      fn: () =>
        `Connection to 192.168.0.1 80 port [tcp/http] succeeded!\nConnection to 192.168.0.1 443 port [tcp/https] succeeded!`,
    },
  };

  const renderHelpMessage = (type) => {
    if (type === 'activity') {
      return (
        <div className="terminal-help">
          <strong>ðŸ§ª Try these beginner commands:</strong>
          <div><code>ping example.com</code> â€” Test domain connectivity</div>
          <div><code>arp-scan -l</code> â€” Scan your local network</div>
          <div><code>nc -z -v 192.168.0.1 20-80</code> â€” Check open ports</div>
        </div>
      );
    }

    if (type === 'challenge') {
      return (
        <div className="terminal-help">
          <strong>ðŸš© Final Challenge Objective:</strong>
          <p>You're a security analyst. Scan the network and identify a potentially vulnerable host.</p>
          <strong>ðŸ’¡ Suggested tools:</strong>
          <div><code>nmap</code>, <code>arp-scan</code>, <code>netcat</code></div>
          <p>Use any combination to simulate a real-world VA scenario.</p>
        </div>
      );
    }

    return null;
  };

  return (
    <div className="module-page">
      <div className="module-header">
        <h1 className="module-title">ðŸ”Ž Vulnerability Assessment</h1>
        <p className="module-subtitle">Find the cracks before attackers do.</p>
      </div>

      {VulnerabilityAssessmentContent.sections.map((section, index) => {
        const isTerminal = section.heading.toLowerCase().includes('activity') || section.heading.toLowerCase().includes('challenge');
        const terminalType = section.heading.toLowerCase().includes('challenge') ? 'challenge' : 'activity';

        return (
          <section key={index} className="module-section">
            <h2 className="section-heading">{section.heading}</h2>
            <ul className="section-points no-bullets">
              {section.content.map((line, idx) =>
                line.startsWith('`') ? (
                  <li key={idx} className="terminal-block">
                    <pre><code>{line.replace(/`/g, '')}</code></pre>
                  </li>
                ) : (
                  <li key={idx} className="point-bullet no-bullet">{line}</li>
                )
              )}
            </ul>

            {isTerminal && (
              <div className="code-sim-wrapper">
                {renderHelpMessage(terminalType)}

                <button
                  className="btn-run"
                  onClick={() => setActiveTerminal(activeTerminal === index ? null : index)}
                  aria-expanded={activeTerminal === index}
                >
                  {activeTerminal === index ? 'Hide Terminal ðŸ›‘' : 'Open Terminal ðŸ’»'}
                </button>

                {activeTerminal === index && (
                  <div className="real-terminal">
                    <Terminal
                      promptLabel="user@cybersprint:~$"
                      commands={terminalCommands}
                      welcomeMessage=""
                      autoFocus
                      style={{
                        backgroundColor: '#000',
                        color: '#00FF00',
                        fontFamily: 'monospace',
                        padding: '1rem',
                        height: '300px',
                        overflowY: 'auto',
                        borderRadius: '10px',
                        marginTop: '1rem'
                      }}
                    />
                  </div>
                )}
              </div>
            )}
          </section>
        );
      })}

      <Footer />
    </div>
  );
}